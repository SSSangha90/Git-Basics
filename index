For Windows:

Initializing a Repository in an Existing Directory
$ cd /c/user/my_project
and type:
$ git init


If you want to start version-controlling existing files (as opposed to an empty directory): 
$ git add *.c
$ git add LICENSE
$ git commit -m 'initial project version'


Cloning an Existing Repository:
— the command you need is git clone
You clone a repository with git clone <url>

$ git clone https://github.com/libgit2/libgit2
That creates a directory named libgit2
If you go into the new libgit2 directory that was just created, 
you’ll see the project files in there, ready to be worked on or used.

If you want to clone the repository into a directory named something other than libgit2, 
you can specify the new directory name as an additional argument:
$ git clone https://github.com/libgit2/libgit2 mylibgit

Git has a number of different transfer protocols you can use.
You may also see git:// or user@server:path/to/repo.git, which uses the SSH transfer protocol.


Recording Changes to the Repository
When you first clone a repository, all of your files will be tracked and unmodified 
because Git just checked them out and you haven’t edited anything.
As you edit files, Git sees them as modified, because you’ve changed them since your last commit. 
As you work, you selectively stage these modified files and then commit all those staged changes, and the cycle repeats.


Checking the Status of Your Files
git status command


Tracking New Files
In order to begin tracking a new file, you use the command git add. 
To begin tracking the README file, you can run this:
$ git add README

You can tell that when a file is staged because it’s under the “Changes to be committed” heading.

git add is a multipurpose command — you use it to begin tracking new files, 
to stage files, and to do other things like marking merge-conflicted files as resolved.

If you modify a file after you run git add, you have to run git add again to stage 
the latest version of the file.


Short Status
While the git status output is pretty comprehensive, it’s also quite wordy. 
Git also has a short status flag so you can see your changes in a more compact way. 
If you run git status -s or git status --short you get a far more simplified output from the command.

New files that aren’t tracked have a ?? next to them, 
new files that have been added to the staging area have an A, 
modified files have an M and so on. 

$ git status -s
 M README
MM Rakefile
A  lib/git.rb
M  lib/simplegit.rb
?? LICENSE.txt

There are two columns to the output — 
the left-hand column indicates the status of the staging area and 
the right-hand column indicates the status of the working tree. 
TheREADME file is modified in the working directory but not yet staged, 
while the lib/simplegit.rb file is modified and staged. 
The Rakefile was modified, staged and then modified again, 
so there are changes to it that are both staged and unstaged.


Ignoring Files
Youcan create a file listing patterns to match them named .gitignore.
$ cat .gitignore
*.[oa]
*~

The first line tells Git to ignore any files ending in “.o” or “.a” 
— object and archive files that may be the product of building your code.
The second line tells Git to ignore all files whose names end with a tilde (~)

Here is another example .gitignore file:
# ignore all .a files
*.a

# but do track lib.a, even though you're ignoring .a files above
!lib.a

# only ignore the TODO file in the current directory, not subdir/TODO
/TODO

# ignore all files in any directory named build
build/

# ignore doc/notes.txt, but not doc/server/arch.txt
doc/*.txt

# ignore all .pdf files in the doc/ directory and any of its subdirectories
doc/**/*.pdf


Viewing Your Staged and Unstaged Changes
If the git status command is too vague for you 
— you want to know exactly what you changed, not just which files were changed 
— you can use the git diff command
you’ll probably use it most often to answer these two questions: 
What have you changed but not yet staged? 
And what have you staged that you are about to commit?

If you want to see what you’ve staged that will go into your next commit, 
you can use git diff --staged. 
This command compares your staged changes to your last commit


Committing Your Changes
The simplest way to commit is to type git commit:
$ git commit
Doing so launches your editor of choice. 

Youcan type your commit message inline with the commit command by specifying it after a -m flag, like this:

$ git commit -m "Story 182: Fix benchmarks for speed"
[master 463dc4f] Story 182: Fix benchmarks for speed
 2 files changed, 2 insertions(+)
 create mode 100644 README

Now you’ve created your first commit! 
You can see that the commit has given you some output about itself: 
which branch you committed to (master), 
what SHA-1 checksum the commit has (463dc4f), 
how many files were changed, and statistics about lines added and removed in the commit.


Removing Files
To remove a file from Git, you have to remove it from your tracked files 
(more accurately, remove it from your staging area) and then commit. 
The git rm command does that, and also removes the file from your working directory 
so you don’t see it as an untracked file the next time around.


Moving Files
Git has a mv command. If you want to rename a file in Git, you can run something like:

$ git mv file_from file_to
and it works fine. In fact, if you run something like this and look at the status, 
you’ll see that Git considers it a renamed file:

$ git mv README.md README
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README

However, this is equivalent to running something like this:

$ mv README.md README
$ git rm README.md
$ git add README

Git figures out that it’s a rename implicitly, 
so it doesn’t matter if you rename a file that way or with the mv command. 
The only real difference is that git mv is one command instead of three — it’s a convenience function


Viewing the Commit History
The most basic and powerful tool to do this is the git log command.
 
Example use a very simple project called “simplegit”. To get the project, run

$ git clone https://github.com/schacon/simplegit-progit
When you run git log in this project, you should get output that looks something like this:

$ git log
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    removed unnecessary test

commit a11bef06a3f659402fe7563abf99ad00de2209e6
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 10:31:28 2008 -0700

    first commit

By default, with no arguments, git log lists the commits made in that repository in reverse chronological order; 
that is, the most recent commits show up first. 
As you can see, this command lists each commit with its SHA-1 checksum, 
the author’s name and email, the date written, and the commit message.

-p or --patch, which shows the difference (the patch output) introduced in each commit. 
You can also limit the number of log entries displayed, such as using -2 to show only the last two entries.

The author is the person who originally wrote the work, whereas the committer is the person who last applied the work. 

Table 2. Common options to git log
Option	Description

-p
Show the patch introduced with each commit.

--stat
Show statistics for files modified in each commit.

--shortstat
Display only the changed/insertions/deletions line from the --stat command.

--name-only
Show the list of files modified after the commit information.

--name-status
Show the list of files affected with added/modified/deleted information as well.

--abbrev-commit
Show only the first few characters of the SHA-1 checksum instead of all 40.

--relative-date
Display the date in a relative format (for example, “2 weeks ago”) instead of using the full date format.

--graph
Display an ASCII graph of the branch and merge history beside the log output.

--pretty
Show commits in an alternate format. Options include oneline, short, full, fuller, and format (where you specify your own format).

--oneline
Shorthand for --pretty=oneline --abbrev-commit used together.

Table 3. Options to limit the output of git log
Option	Description

-<n>
Show only the last n commits

--since, --after
Limit the commits to those made after the specified date.

--until, --before
Limit the commits to those made before the specified date.

--author
Only show commits in which the author entry matches the specified string.

--committer
Only show commits in which the committer entry matches the specified string.

--grep
Only show commits with a commit message containing the string

-S
Only show commits adding or removing code matching the string


Undoing Things

Be careful, because you can’t always undo some of these undos. 
This is one of the few areas in Git where you may lose some work if you do it wrong.

If you want to redo a commit, make the additional changes you forgot, stage them, and commit again using the --amend option:
$ git commit --amend

As an example, if you commit and then realize you forgot to stage the changes in a file you wanted to add to this commit, 
you can do something like this:

$ git commit -m 'initial commit'
$ git add forgotten_file
$ git commit --amend
You end up with a single commit — the second commit replaces the results of the first.

It’s important to understand that when you’re amending your last commit, 
you’re not so much fixing it as replacing it entirely with a new, 
improved commit that pushes the old commit out of the way and puts the new commit in its place. 
Effectively, it’s as if the previous commit never happened, and it won’t show up in your repository history.


Showing Your Remotes
To see which remote servers you have configured, you can run the git remote command. 
It lists the shortnames of each remote handle you’ve specified. 
If you’ve cloned your repository, you should at least see origin — 
that is the default name Git gives to the server you cloned from


Adding Remote Repositories
We’ve mentioned and given some demonstrations of how the git clone command implicitly adds the origin remote for you. 
To add a new remote Git repository as a shortname you can reference easily, run git remote add <shortname> <url>

$ git remote
origin
$ git remote add pb https://github.com/paulboone/ticgit
$ git remote -v
origin	https://github.com/schacon/ticgit (fetch)
origin	https://github.com/schacon/ticgit (push)
pb	https://github.com/paulboone/ticgit (fetch)
pb	https://github.com/paulboone/ticgit (push)
Now you can use the string pb on the command line in lieu of the whole URL. 
For example, if you want to fetch all the information that Paul has but that you don’t yet have in your repository, 
you can run git fetch pb:

$ git fetch pb
remote: Counting objects: 43, done.
remote: Compressing objects: 100% (36/36), done.
remote: Total 43 (delta 10), reused 31 (delta 5)
Unpacking objects: 100% (43/43), done.
From https://github.com/paulboone/ticgit
 * [new branch]      master     -> pb/master
 * [new branch]      ticgit     -> pb/ticgit
Paul’s master branch is now accessible locally as pb/master — 
you can merge it into one of your branches, 
or you can check out a local branch at that point if you want to inspect it.


Fetching and Pulling from Your Remotes
As you just saw, to get data from your remote projects, you can run:

$ git fetch <remote>

If your current branch is set up to track a remote branch (see the next section and Git Branching for more information), 
you can use the git pull command to automatically fetch and then merge that remote branch into your current branch. 


Pushing to Your Remotes
When you have your project at a point that you want to share, you have to push it upstream. 
The command for this is simple: 
git push <remote> <branch>.


Renaming and Removing Remotes
You can run git remote rename to change a remote’s shortname. 
For instance, if you want to rename pb to paul, you can do so with git remote rename:

$ git remote rename pb paul
$ git remote
origin
paul
It’s worth mentioning that this changes all your remote-tracking branch names, too. 
What used to be referenced at pb/master is now at paul/master.

If you want to remove a remote for some reason — 
you’ve moved the server or are no longer using a particular mirror, 
or perhaps a contributor isn’t contributing anymore — you can either use git remote remove or git remote rm:

$ git remote remove paul
$ git remote
origin
Once you delete the reference to a remote this way, 
all remote-tracking branches and configuration settings associated with that remote are also deleted.
